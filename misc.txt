Reconciliation & fibre overview :
1.The createRoot create's its own DOM and then compare it with the web browser's DOM and only update those components which are actually updated.
2.But the browser removes the whole DOM and then recrates the whole DOM with the updated values this is called reload.
3. However virtual DOM tracks whole DOM like a tree like structure and updates only those values which were only changed.
4. But some values depends on network call so if we update a value it might get update immediately via a network call.
5. So we will have to update it again. To avoid this overhead we can drop the updation calls for the immediate value update.
6. The current algo used by the React is called the React Fibre algo.
7. The algo react uses to differentiate the web browser's tree and React's tree formed through create root is called reconciliation.
8. Reconciliation is the algo behind what popularly known as the Virtual-DOM.
9.In UI it is not necessary for every update to be applied immediately. */


-> React Fiber is an reimplementation of React's core algorithm.
-> The goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is incremental rendering: the ability to split rendering work into chunks and spread it out over multiple frames.
-> Other key features include the ability to pause, abort, or reuse work as new updates come in; the ability to assign priority to different types of updates; and new concurrency primitives.







import React, { useEffect, useState } from "react";
import { NavLink } from "react-router-dom";
import { useLoaderData } from "react-router-dom";

function Github() {
  /* //* React router provided normal method to fetch api
  const [data, setData] = useState([])
  useEffect(() => {
    fetch(`https://api.github.com/users/RishabhTrivedi-22`)
    .then(response => response.json())
    .then(data => {
      console.log(data);
      setData(data)
    })
  }, [])*/

  const data = useLoaderData();

  return (
    <div className="flex justify-center items-center bg-gray-500 p-4 mt-4 mb-4 text-4xl">
      <img
        className="mr-3 p-2"
        src={data.avatar_url}
        alt="Git Avatar"
        width={250}
      />
      <h1>
        Profile Name : {data.login} <br />
        Profile Link :{" "}
        <NavLink className="underline" to={data.html_url} target="/blank">
          {data.html_url}
        </NavLink>{" "}
        <br /> <br />
        GITHUB Repos : {data.public_repos}
      </h1>
    </div>
  );
}

export default Github;

// * Optimised method to fetch api that uses LOADER from router to fetch and save content even before the content is loaded.
export const githubLoader = async () => {
  const response = await fetch(
    `https://api.github.com/users/RishabhTrivedi-22`
  );
  return response.json();
};




<Route 
        loader={githubLoader}
        path="github" 
        element={<Github />} />